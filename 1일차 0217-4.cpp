#include<stdio.h>
#include<stdlib.h> //-> malloc 사용 할려고
//#define MAX 5 --> 이건 정적인 타입에 넣는게 가능 왜나하면 프로그램 실행전(전처리)에 미리 들어가는거기 때문
void main() {
	
	int n;
	printf("배열요소의 개수 입력 : ");
	scanf("%d", &n);
	// int arr[n]; // 정적인 타입 --> [동적 메모리 할당]
	int *arr=(int*)malloc(n*sizeof(int)); 
	// 얼만큼 공간을 할당 받을지 ()안에 저장 n개 만큼 int 만들어주세요
	// n개 만큼의 int 공간을 할당
	// 근데 이 공간은 변수명이 없는 주소 이므로 포인터에 저장한다 --> *arr
	// mallco는 리턴타입이 없는 주소여서 int*로 형변환 한다.
	// 즉 arr 라는 공간을 할당 받은 배열을 만든거다.
	// mallco는 배열을 만드는 함수가 아니라!! 공간을 할당 받는 함수이다.
	// 그렇지만 arr는 mallco가 만든 공간의 주소를 저장하는거여서
	// arr[i]는 mallco의 i번째 주소를 불러 mallco의 공간에 접속해 값을 보는것으로 배열 행세를 한다고 볼수있다.

	// 지금 다시 적어보면 malloc은 그저 배열이랑 똑같다. 그 대신 배열은 사이즈가 정해져야 하는 정적할당이고,
	// malloc은 그저 동적으로 사이즈를 할당하는 배열일 뿐이다.
	// 그런데 배열이니까 배열은 주소로 받아야 하므로 *arr로 받는것이고
	for (int i = 0; i < n; i++) {
		printf("%d번째 요소 입력 : ", i + 1);
		scanf("%d", &arr[i]); // arr[i]로 &를 써야 하는이유 arr는 배열 전체를 나타내지만
								// arr[i]는 하나의 값 즉 단일 int 라서 &가 필요하다.
	}
	printf("[ ");
	for (int i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
	printf(" ]\n");

	free(arr); // 할당해제.공간소멸
}
// 포인터를 사용하는 이유-3
// 동적 메모리 할당(동적 배열할당) 할때